{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  // Allow Replit dev origins for HMR and asset loading\n  allowedDevOrigins: process.env.NODE_ENV === 'development' \n    ? ['https://*.replit.dev', 'https://*.replit.com'] \n    : [],\n  \n  // Configure for Replit environment - development only\n  async headers() {\n    // Only allow embedding in Replit preview during development\n    if (process.env.NODE_ENV === 'development') {\n      return [\n        {\n          source: '/(.*)',\n          headers: [\n            {\n              key: 'Content-Security-Policy',\n              value: 'frame-ancestors https://*.replit.dev https://*.replit.com;',\n            },\n          ],\n        },\n      ];\n    }\n    // Production: prevent clickjacking\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'SAMEORIGIN',\n          },\n        ],\n      },\n    ];\n  },\n};\n\nexport default nextConfig;\n","size_bytes":1012},"replit.md":{"content":"# Learning Management System\n\n## Overview\n\nThis is a modern Learning Management System built with Next.js 15, featuring a comprehensive course management platform for both instructors and students. The application provides course browsing, instructor dashboards for content creation, and Firebase integration for data persistence. The system is designed with a component-based architecture using React, TypeScript, and Material-UI for the user interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Next.js 15 with App Router for modern React development and server-side rendering\n- **UI Components**: Material-UI (@mui/material) for consistent design system and pre-built components\n- **Icons**: Mix of Material-UI icons (@mui/icons-material) and Lucide React icons for comprehensive iconography\n- **Styling**: Tailwind CSS for utility-first styling with custom theme extensions\n- **Typography**: Geist font family (sans and mono) for modern, readable text\n- **State Management**: React hooks (useState, useEffect) for local component state\n- **Client-Side Routing**: Next.js App Router with dynamic routes for courses and user pages\n\n### Backend Architecture\n- **API Routes**: Next.js API routes in `/app/api/` following RESTful conventions\n- **Data Models**: TypeScript interfaces for Course, Lesson, Assignment, and related entities\n- **Request Handling**: Separate routes for CRUD operations (GET, POST, PUT, DELETE)\n- **Validation**: Server-side input validation for all API endpoints\n- **Error Handling**: Structured error responses with appropriate HTTP status codes\n\n### Data Storage Solutions\n- **Primary Database**: Firebase Firestore for document-based data storage\n- **Collections**: Separate collections for courses, lessons, and assignments\n- **Data Relationships**: Course-to-lessons and course-to-assignments relationships via courseId references\n- **Timestamps**: Server-side timestamps for created/updated tracking\n- **Real-time Capabilities**: Firestore's real-time listeners for live data updates\n\n### Authentication and Authorization\n- **Auth Provider**: Firebase Authentication for user management\n- **Storage**: Firebase Storage for file uploads and media content\n- **Analytics**: Firebase Analytics for usage tracking and insights\n- **Security**: Firestore security rules and authenticated API endpoints (planned)\n\n### Component Structure\n- **Page Components**: Route-specific components in `/app/` directory\n- **Reusable Components**: Shared UI components in `/components/` directory\n- **Form Components**: Specialized forms for course, lesson, and assignment creation\n- **Layout Components**: Navbar and layout wrappers for consistent page structure\n- **Card Components**: Reusable course cards for listing and display\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **Next.js 15.5.2**: React framework for production applications\n- **React 19.1.0 & React DOM 19.1.0**: Latest React library for component rendering\n- **TypeScript**: Static type checking for enhanced development experience\n\n### UI and Styling\n- **Material-UI v7.3.2**: Comprehensive React component library with theme support\n- **@emotion/react & @emotion/styled**: CSS-in-JS library powering Material-UI styling\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **Lucide React**: Modern icon library for additional iconography\n\n### Backend Services\n- **Firebase 12.2.1**: Complete backend-as-a-service platform including:\n  - Firestore for NoSQL database\n  - Authentication for user management\n  - Storage for file uploads\n  - Analytics for usage tracking\n\n### Development Tools\n- **ESLint**: Code linting for consistent code quality\n- **PostCSS & Autoprefixer**: CSS post-processing for browser compatibility\n- **TypeScript Compiler**: Static type checking and compilation\n\n### Configuration Considerations\n- **Replit Optimization**: Custom headers configuration for iframe compatibility\n- **Font Optimization**: Next.js font optimization for Geist typography\n- **Image Optimization**: Next.js Image component for performance-optimized images\n- **Environment Configuration**: Firebase configuration through environment variables","size_bytes":4266},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n      },\n    },\n  },\n  plugins: [],\n} satisfies Config;","size_bytes":380},"app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n","size_bytes":345},"app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport Navbar from \"@/components/Navbar\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n        <Navbar /> \n        <main>{children}</main>\n      </body>\n    </html>\n  );\n}\n","size_bytes":749},"app/page.tsx":{"content":"// app/page.tsx\n\"use client\"; // This is a client component\n\nimport { useEffect, useState } from \"react\";\nimport CourseCard from \"@/components/CourseCard\";\nimport CategoryFilter from \"@/components/CategoryFilter\";\nimport { mockCourses } from \"@/lib/mockCourses\";\nimport type { Course } from \"@/lib/types\"; // Import your Course interface\n\nexport default function HomePage() {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"All\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    try {\n      const coursesData: Course[] = mockCourses;\n      setCourses(coursesData);\n      setFilteredCourses(coursesData);\n      // Extract unique categories\n      const uniqueCategories = [\n        \"All\",\n        ...new Set(coursesData.map((course) => course.category)),\n      ];\n      setCategories(uniqueCategories);\n    } catch {\n      setError(\"Failed to load courses. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Fetch courses on component mount\n\n  useEffect(() => {\n    if (selectedCategory === \"All\") {\n      setFilteredCourses(courses);\n    } else {\n      setFilteredCourses(\n        courses.filter((course) => course.category === selectedCategory)\n      );\n    }\n  }, [selectedCategory, courses]); // Re-filter when category or courses change\n\n  const handleSelectCategory = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"container mx-auto p-8\">\n          <div className=\"text-center py-20\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-xl text-gray-600\">Loading amazing courses...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"container mx-auto p-8\">\n          <div className=\"text-center py-20\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto\">\n              <p className=\"text-red-600 text-lg font-medium\">{error}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-16\">\n        <div className=\"container mx-auto px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-4 text-balance\">\n            Unlock Your Potential with Expert-Led Courses\n          </h1>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto text-pretty\">\n            Join thousands of learners advancing their careers with our\n            comprehensive online courses\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors\">\n              Browse Courses\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto p-8\">\n        {/* Stats Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12 -mt-8\">\n          <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n              {courses.length}+\n            </div>\n            <div className=\"text-gray-600\">Expert Courses</div>\n          </div>\n          <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-green-600 mb-2\">50K+</div>\n            <div className=\"text-gray-600\">Active Students</div>\n          </div>\n          <div className=\"bg-white rounded-xl shadow-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-purple-600 mb-2\">95%</div>\n            <div className=\"text-gray-600\">Success Rate</div>\n          </div>\n        </div>\n\n        {/* Course Section */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold text-gray-800 mb-4\">\n              Explore Our Courses\n            </h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              Discover courses designed by industry experts to help you master\n              new skills and advance your career\n            </p>\n          </div>\n\n          <CategoryFilter\n            categories={categories.filter((cat) => cat !== \"All\")}\n            onSelectCategory={handleSelectCategory}\n            selectedCategory={selectedCategory}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-8\">\n            {filteredCourses.length > 0 ? (\n              filteredCourses.map((course) => (\n                <CourseCard key={course.id} course={course} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <div className=\"text-gray-400 text-6xl mb-4\">📚</div>\n                <p className=\"text-gray-600 text-xl\">\n                  No courses found in this category.\n                </p>\n                <p className=\"text-gray-500 mt-2\">\n                  Try selecting a different category or browse all courses.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5930},"components/CategoryFilter.tsx":{"content":"// components/CategoryFilter.tsx\r\n\"use client\" // This is a client component\r\n\r\ninterface CategoryFilterProps {\r\n  categories: string[]\r\n  onSelectCategory: (category: string) => void\r\n  selectedCategory: string\r\n}\r\n\r\nfunction CategoryFilter({ categories, onSelectCategory, selectedCategory }: CategoryFilterProps) {\r\n  return (\r\n    <div className=\"mb-8\">\r\n      <h3 className=\"text-lg font-semibold mb-4 text-gray-800\">Filter by Category</h3>\r\n      <div className=\"flex flex-wrap gap-3\">\r\n        <button\r\n          onClick={() => onSelectCategory(\"All\")}\r\n          className={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 ${\r\n            selectedCategory === \"All\"\r\n              ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg\"\r\n              : \"bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md\"\r\n          }`}\r\n        >\r\n          All Courses\r\n        </button>\r\n        {categories.map((category) => (\r\n          <button\r\n            key={category}\r\n            onClick={() => onSelectCategory(category)}\r\n            className={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 ${\r\n              selectedCategory === category\r\n                ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg\"\r\n                : \"bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md\"\r\n            }`}\r\n          >\r\n            {category}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryFilter\r\n","size_bytes":1536},"components/CourseCard.tsx":{"content":"// components/CourseCard.tsx\r\n\"use client\"; // This is a client component\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport type { Course } from \"@/lib/types\"; // Import your Course interface\r\n\r\ninterface CourseCardProps {\r\n  course: Course;\r\n}\r\n\r\nfunction CourseCard({ course }: CourseCardProps) {\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-xl border border-gray-100\">\r\n      <div className=\"relative\">\r\n        <Image\r\n          src={course.imageUrl || \"/placeholder.svg\"}\r\n          alt={course.title}\r\n          width={400}\r\n          height={192}\r\n          className=\"w-full h-48 object-cover\"\r\n          style={{ objectFit: \"cover\" }}\r\n          priority={true}\r\n        />\r\n        <div className=\"absolute top-3 right-3\">\r\n          <span className=\"bg-white/90 backdrop-blur-sm text-gray-800 text-xs px-3 py-1 rounded-full font-medium shadow-sm\">\r\n            {course.category}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"p-6\">\r\n        <h3 className=\"text-xl font-bold mb-3 text-gray-800 line-clamp-2\">\r\n          {course.title}\r\n        </h3>\r\n        <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\r\n          {course.description.substring(0, 120)}...\r\n        </p>\r\n\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <span className=\"text-2xl font-bold text-blue-600\">\r\n            ${course.price.toFixed(2)}\r\n          </span>\r\n          <div className=\"flex items-center space-x-1\">\r\n            <span className=\"text-yellow-400\">★</span>\r\n            <span className=\"text-sm text-gray-600\">4.8 (234)</span>\r\n          </div>\r\n        </div>\r\n\r\n        <Link\r\n          href={`/courses/${course.id}`}\r\n          className=\"block w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg text-center font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-md hover:shadow-lg\"\r\n        >\r\n          Enroll Now\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CourseCard;\r\n","size_bytes":2148},"components/Navbar.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  IconButton,\n  Avatar,\n  Menu,\n  MenuItem,\n  Divider,\n  Box,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemButton,\n  useTheme,\n  useMediaQuery,\n} from \"@mui/material\"\nimport {\n  Person as PersonIcon,\n  Logout as LogoutIcon,\n  Settings as SettingsIcon,\n  MenuBook as MenuBookIcon,\n  Menu as MenuIcon,\n  Close as CloseIcon,\n} from \"@mui/icons-material\"\n\nfunction Navbar() {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)\n  const theme = useTheme()\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"))\n\n  // Mock user data - replace with actual auth context\n  const user = {\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    avatar: \"/diverse-user-avatars.png\",\n  }\n\n  const handleLogout = () => {\n    // Add logout logic here\n    console.log(\"Logging out...\")\n    setAnchorEl(null)\n  }\n\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleProfileMenuClose = () => {\n    setAnchorEl(null)\n  }\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen)\n  }\n\n  return (\n    <>\n      <AppBar\n        position=\"static\"\n        sx={{\n          background: \"linear-gradient(to right, #2563eb, #1d4ed8)\",\n          boxShadow: \"0 4px 6px -1px rgba(0, 0, 0, 0.1)\",\n          borderBottom: \"1px solid rgba(59, 130, 246, 0.2)\",\n        }}\n      >\n        <Toolbar sx={{ px: { xs: 2, sm: 4 } }}>\n          {/* Logo */}\n          <Link\n            href=\"/\"\n            style={{ textDecoration: \"none\", color: \"inherit\", display: \"flex\", alignItems: \"center\", gap: \"8px\" }}\n          >\n            <Box\n              sx={{\n                backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                p: 1,\n                borderRadius: 1,\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <MenuBookIcon sx={{ color: \"white\", fontSize: 24 }} />\n            </Box>\n            <Typography variant=\"h5\" component=\"span\" sx={{ fontWeight: \"bold\", color: \"white\" }}>\n              LearnHub\n            </Typography>\n          </Link>\n\n          <Box sx={{ flexGrow: 1 }} />\n\n          {/* Desktop Navigation */}\n          {!isMobile && (\n            <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 3 }}>\n              <Link href=\"/courses\" style={{ textDecoration: \"none\" }}>\n                <Button\n                  sx={{\n                    color: \"rgba(255, 255, 255, 0.9)\",\n                    fontWeight: 500,\n                    \"&:hover\": {\n                      color: \"white\",\n                      backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                    },\n                  }}\n                >\n                  Courses\n                </Button>\n              </Link>\n              <Link href=\"/my-learning\" style={{ textDecoration: \"none\" }}>\n                <Button\n                  sx={{\n                    color: \"rgba(255, 255, 255, 0.9)\",\n                    fontWeight: 500,\n                    \"&:hover\": {\n                      color: \"white\",\n                      backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                    },\n                  }}\n                >\n                  My Learning\n                </Button>\n              </Link>\n              <Link href=\"/instructor\" style={{ textDecoration: \"none\" }}>\n                <Button\n                  sx={{\n                    color: \"rgba(255, 255, 255, 0.9)\",\n                    fontWeight: 500,\n                    \"&:hover\": {\n                      color: \"white\",\n                      backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                    },\n                  }}\n                >\n                  Teach\n                </Button>\n              </Link>\n\n              {/* User Profile */}\n              <IconButton\n                onClick={handleProfileMenuOpen}\n                sx={{\n                  p: 0,\n                  \"&:hover\": {\n                    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                  },\n                }}\n              >\n                <Avatar\n                  src={user.avatar || \"/placeholder.svg\"}\n                  alt={user.name}\n                  sx={{\n                    width: 40,\n                    height: 40,\n                    border: \"2px solid rgba(255, 255, 255, 0.2)\",\n                    bgcolor: \"#3b82f6\",\n                  }}\n                >\n                  {user.name\n                    .split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\")}\n                </Avatar>\n              </IconButton>\n\n              <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={handleProfileMenuClose}\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"right\",\n                }}\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                sx={{ mt: 1 }}\n              >\n                <Box sx={{ px: 2, py: 1, minWidth: 200 }}>\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\n                    {user.name}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {user.email}\n                  </Typography>\n                </Box>\n                <Divider />\n                <MenuItem onClick={handleProfileMenuClose}>\n                  <Link\n                    href=\"/profile\"\n                    style={{\n                      textDecoration: \"none\",\n                      color: \"inherit\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      width: \"100%\",\n                    }}\n                  >\n                    <ListItemIcon>\n                      <PersonIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    Profile\n                  </Link>\n                </MenuItem>\n                <MenuItem onClick={handleProfileMenuClose}>\n                  <Link\n                    href=\"/settings\"\n                    style={{\n                      textDecoration: \"none\",\n                      color: \"inherit\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      width: \"100%\",\n                    }}\n                  >\n                    <ListItemIcon>\n                      <SettingsIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    Settings\n                  </Link>\n                </MenuItem>\n                <Divider />\n                <MenuItem onClick={handleLogout} sx={{ color: \"error.main\" }}>\n                  <ListItemIcon>\n                    <LogoutIcon fontSize=\"small\" sx={{ color: \"error.main\" }} />\n                  </ListItemIcon>\n                  Logout\n                </MenuItem>\n              </Menu>\n            </Box>\n          )}\n\n          {/* Mobile Menu Button */}\n          {isMobile && (\n            <IconButton\n              onClick={toggleMobileMenu}\n              sx={{\n                color: \"white\",\n                \"&:hover\": {\n                  backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n                },\n              }}\n            >\n              {isMobileMenuOpen ? <CloseIcon /> : <MenuIcon />}\n            </IconButton>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        anchor=\"top\"\n        open={isMobileMenuOpen && isMobile}\n        onClose={() => setIsMobileMenuOpen(false)}\n        sx={{\n          \"& .MuiDrawer-paper\": {\n            background: \"linear-gradient(to right, #2563eb, #1d4ed8)\",\n            color: \"white\",\n            mt: \"64px\", // Height of AppBar\n          },\n        }}\n      >\n        <List sx={{ py: 2 }}>\n          <ListItem disablePadding>\n            <ListItemButton onClick={() => setIsMobileMenuOpen(false)}>\n              <Link href=\"/courses\" style={{ textDecoration: \"none\", color: \"inherit\", width: \"100%\" }}>\n                <ListItemText primary=\"Courses\" />\n              </Link>\n            </ListItemButton>\n          </ListItem>\n          <ListItem disablePadding>\n            <ListItemButton onClick={() => setIsMobileMenuOpen(false)}>\n              <Link href=\"/my-learning\" style={{ textDecoration: \"none\", color: \"inherit\", width: \"100%\" }}>\n                <ListItemText primary=\"My Learning\" />\n              </Link>\n            </ListItemButton>\n          </ListItem>\n          <ListItem disablePadding>\n            <ListItemButton onClick={() => setIsMobileMenuOpen(false)}>\n              <Link href=\"/instructor\" style={{ textDecoration: \"none\", color: \"inherit\", width: \"100%\" }}>\n                <ListItemText primary=\"Teach\" />\n              </Link>\n            </ListItemButton>\n          </ListItem>\n\n          <Divider sx={{ my: 1, borderColor: \"rgba(255, 255, 255, 0.2)\" }} />\n\n          <ListItem sx={{ px: 2, py: 1 }}>\n            <Avatar\n              src={user.avatar || \"/placeholder.svg\"}\n              alt={user.name}\n              sx={{\n                width: 32,\n                height: 32,\n                mr: 2,\n                border: \"1px solid rgba(255, 255, 255, 0.2)\",\n                bgcolor: \"#3b82f6\",\n              }}\n            >\n              {user.name\n                .split(\" \")\n                .map((n) => n[0])\n                .join(\"\")}\n            </Avatar>\n            <Box>\n              <Typography variant=\"body2\" fontWeight=\"medium\">\n                {user.name}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: \"rgba(255, 255, 255, 0.7)\" }}>\n                {user.email}\n              </Typography>\n            </Box>\n          </ListItem>\n\n          <ListItem disablePadding>\n            <ListItemButton onClick={() => setIsMobileMenuOpen(false)}>\n              <ListItemIcon>\n                <PersonIcon sx={{ color: \"white\" }} />\n              </ListItemIcon>\n              <Link href=\"/profile\" style={{ textDecoration: \"none\", color: \"inherit\", width: \"100%\" }}>\n                <ListItemText primary=\"Profile\" />\n              </Link>\n            </ListItemButton>\n          </ListItem>\n\n          <ListItem disablePadding>\n            <ListItemButton onClick={() => setIsMobileMenuOpen(false)}>\n              <ListItemIcon>\n                <SettingsIcon sx={{ color: \"white\" }} />\n              </ListItemIcon>\n              <Link href=\"/settings\" style={{ textDecoration: \"none\", color: \"inherit\", width: \"100%\" }}>\n                <ListItemText primary=\"Settings\" />\n              </Link>\n            </ListItemButton>\n          </ListItem>\n\n          <ListItem disablePadding>\n            <ListItemButton onClick={handleLogout}>\n              <ListItemIcon>\n                <LogoutIcon sx={{ color: \"#fca5a5\" }} />\n              </ListItemIcon>\n              <ListItemText primary=\"Logout\" sx={{ color: \"#fca5a5\" }} />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Drawer>\n    </>\n  )\n}\n\nexport default Navbar\n","size_bytes":11350},"lib/api.ts":{"content":"// lib/api.ts - API service functions for instructor dashboard\nimport { Course } from \"@/lib/types\";\n\nconst API_BASE = '/api';\n\n// Course API functions\nexport const courseAPI = {\n  // Get all courses\n  getAll: async () => {\n    const response = await fetch(`${API_BASE}/courses`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch courses');\n    }\n    const data = await response.json();\n    return data.courses;\n  },\n\n  // Get single course\n  getById: async (id: string) => {\n    const response = await fetch(`${API_BASE}/courses/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch course');\n    }\n    return response.json();\n  },\n\n  // Create new course\n  create: async (courseData: Omit<Course, \"id\">) => {\n    const response = await fetch(`${API_BASE}/courses`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(courseData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create course');\n    }\n    return response.json();\n  },\n\n  // Update course\n  update: async (id: string, courseData: Omit<Course, \"id\">) => {\n    const response = await fetch(`${API_BASE}/courses/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(courseData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update course');\n    }\n    return response.json();\n  },\n\n  // Delete course\n  delete: async (id: string) => {\n    const response = await fetch(`${API_BASE}/courses/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete course');\n    }\n    return response.json();\n  }\n};\n\n// Lesson API functions\nexport interface Lesson {\n  id: string;\n  courseId: string;\n  title: string;\n  description: string;\n  duration: string;\n  videoUrl?: string;\n  content: string;\n}\n\nexport const lessonAPI = {\n  // Get all lessons\n  getAll: async () => {\n    const response = await fetch(`${API_BASE}/lessons`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lessons');\n    }\n    const data = await response.json();\n    return data.lessons;\n  },\n\n  // Get single lesson\n  getById: async (id: string) => {\n    const response = await fetch(`${API_BASE}/lessons/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lesson');\n    }\n    return response.json();\n  },\n\n  // Create new lesson\n  create: async (lessonData: Omit<Lesson, \"id\">) => {\n    const response = await fetch(`${API_BASE}/lessons`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(lessonData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create lesson');\n    }\n    return response.json();\n  },\n\n  // Update lesson\n  update: async (id: string, lessonData: Omit<Lesson, \"id\">) => {\n    const response = await fetch(`${API_BASE}/lessons/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(lessonData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update lesson');\n    }\n    return response.json();\n  },\n\n  // Delete lesson\n  delete: async (id: string) => {\n    const response = await fetch(`${API_BASE}/lessons/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete lesson');\n    }\n    return response.json();\n  }\n};\n\n// Assignment API functions\nexport interface Assignment {\n  id: string;\n  courseId: string;\n  title: string;\n  description: string;\n  dueDate: string;\n  maxPoints: number;\n  instructions: string;\n}\n\nexport const assignmentAPI = {\n  // Get all assignments\n  getAll: async () => {\n    const response = await fetch(`${API_BASE}/assignments`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch assignments');\n    }\n    const data = await response.json();\n    return data.assignments;\n  },\n\n  // Get single assignment\n  getById: async (id: string) => {\n    const response = await fetch(`${API_BASE}/assignments/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch assignment');\n    }\n    return response.json();\n  },\n\n  // Create new assignment\n  create: async (assignmentData: Omit<Assignment, \"id\">) => {\n    const response = await fetch(`${API_BASE}/assignments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(assignmentData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create assignment');\n    }\n    return response.json();\n  },\n\n  // Update assignment\n  update: async (id: string, assignmentData: Omit<Assignment, \"id\">) => {\n    const response = await fetch(`${API_BASE}/assignments/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(assignmentData),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update assignment');\n    }\n    return response.json();\n  },\n\n  // Delete assignment\n  delete: async (id: string) => {\n    const response = await fetch(`${API_BASE}/assignments/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to delete assignment');\n    }\n    return response.json();\n  }\n};","size_bytes":5860},"lib/assignments.ts":{"content":"","size_bytes":0},"lib/auth.ts":{"content":"","size_bytes":0},"lib/courses.ts":{"content":"","size_bytes":0},"lib/enrollment.ts":{"content":"","size_bytes":0},"lib/firebase.ts":{"content":"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAnalytics, isSupported } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAS9k9MV2z1aDGMJew6Njc_2f0VfgCdX14\",\r\n  authDomain: \"learning-management-d0043.firebaseapp.com\",\r\n  projectId: \"learning-management-d0043\",\r\n  storageBucket: \"learning-management-d0043.firebasestorage.app\",\r\n  messagingSenderId: \"1014988517050\",\r\n  appId: \"1:1014988517050:web:b408d2c58466eef3461c83\",\r\n  measurementId: \"G-16WBXKY3MB\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Analytics only works in the browser\r\n\r\nexport const analytics = (await isSupported()) ? getAnalytics(app) : null;\r\n","size_bytes":1239},"lib/lessons.ts":{"content":"","size_bytes":0},"lib/mockCourses.ts":{"content":"// Mock data for courses\r\nexport const mockCourses = [\r\n  {\r\n    id: '1',\r\n    title: 'Introduction to Programming',\r\n    description: 'Learn the basics of programming using Python.',\r\n    category: 'Programming',\r\n    imageUrl: '/public/file.svg',\r\n    instructor: 'Jane Doe',\r\n    price: 49.99,\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Web Development Bootcamp',\r\n    description: 'Become a full-stack web developer with hands-on projects.',\r\n    category: 'Web Development',\r\n    imageUrl: '/public/globe.svg',\r\n    instructor: 'John Smith',\r\n    price: 79.99,\r\n  },\r\n  {\r\n    id: '3',\r\n    title: 'Data Science Fundamentals',\r\n    description: 'Explore data analysis, visualization, and machine learning.',\r\n    category: 'Data Science',\r\n    imageUrl: '/public/vercel.svg',\r\n    instructor: 'Alice Johnson',\r\n    price: 99.99,\r\n  }\r\n];\r\n","size_bytes":839},"lib/types.ts":{"content":"// lib/types.ts\nexport interface Course {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  instructor: string;\n  imageUrl: string;\n  price: number;\n  // Add any other course-related fields here\n}\n\nexport interface CourseModule {\n  id: string;\n  title: string;\n  duration: string;\n  description: string;\n  completed: boolean;\n}\n\nexport interface CourseReview {\n  id: string;\n  userName: string;\n  rating: number;\n  comment: string;\n  date: string;\n}\n\nexport interface Lesson {\n  id: string;\n  courseId: string;\n  title: string;\n  description: string;\n  duration: string;\n  videoUrl?: string;\n  content: string;\n}\n\nexport interface Assignment {\n  id: string;\n  courseId: string;\n  title: string;\n  description: string;\n  dueDate: string;\n  maxPoints: number;\n  instructions: string;\n}","size_bytes":809},"app/courses/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport CourseCard from \"@/components/CourseCard\";\nimport CategoryFilter from \"@/components/CategoryFilter\";\nimport { mockCourses } from \"@/lib/mockCourses\";\nimport type { Course } from \"@/lib/types\";\n\nexport default function CoursesPage() {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"All\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    try {\n      const coursesData: Course[] = mockCourses;\n      setCourses(coursesData);\n      setFilteredCourses(coursesData);\n      // Extract unique categories\n      const uniqueCategories = [\n        \"All\",\n        ...new Set(coursesData.map((course) => course.category)),\n      ];\n      setCategories(uniqueCategories);\n    } catch {\n      setError(\"Failed to load courses. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedCategory === \"All\") {\n      setFilteredCourses(courses);\n    } else {\n      setFilteredCourses(\n        courses.filter((course) => course.category === selectedCategory)\n      );\n    }\n  }, [selectedCategory, courses]);\n\n  const handleSelectCategory = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"container mx-auto p-8\">\n          <div className=\"text-center py-20\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-xl text-gray-600\">Loading courses...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"container mx-auto p-8\">\n          <div className=\"text-center py-20\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto\">\n              <p className=\"text-red-600 text-lg font-medium\">{error}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-16\">\n        <div className=\"container mx-auto px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-4 text-balance\">\n            Explore Our Course Catalog\n          </h1>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto text-pretty\">\n            Discover a wide range of expert-led courses designed to help you master new skills and advance your career\n          </p>\n          <div className=\"flex items-center justify-center space-x-6 text-blue-100\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold\">{courses.length}+</span>\n              <span>Courses</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold\">50K+</span>\n              <span>Students</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold\">95%</span>\n              <span>Success Rate</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto p-8\">\n        {/* Course Section */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold text-gray-800 mb-4\">\n              Find Your Perfect Course\n            </h2>\n            <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n              Filter by category to find courses that match your interests and career goals\n            </p>\n          </div>\n\n          <CategoryFilter\n            categories={categories.filter((cat) => cat !== \"All\")}\n            onSelectCategory={handleSelectCategory}\n            selectedCategory={selectedCategory}\n          />\n\n          <div className=\"mt-8\">\n            {selectedCategory !== \"All\" && (\n              <div className=\"mb-6\">\n                <p className=\"text-gray-600 text-lg\">\n                  Showing {filteredCourses.length} courses in{\" \"}\n                  <span className=\"font-semibold text-blue-600\">\n                    {selectedCategory}\n                  </span>\n                </p>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredCourses.length > 0 ? (\n                filteredCourses.map((course) => (\n                  <CourseCard key={course.id} course={course} />\n                ))\n              ) : (\n                <div className=\"col-span-full text-center py-12\">\n                  <div className=\"text-gray-400 text-6xl mb-4\">📚</div>\n                  <p className=\"text-gray-600 text-xl\">\n                    No courses found in this category.\n                  </p>\n                  <p className=\"text-gray-500 mt-2\">\n                    Try selecting a different category or browse all courses.\n                  </p>\n                  <button\n                    onClick={() => handleSelectCategory(\"All\")}\n                    className=\"mt-4 bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors\"\n                  >\n                    View All Courses\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6010},"app/dashboard/page.tsx":{"content":"","size_bytes":0},"app/instructor/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Plus, Edit, Trash2, BookOpen, FileText, Users, Loader2 } from \"lucide-react\";\nimport dynamic from \"next/dynamic\";\nimport type { Course } from \"@/lib/types\";\nimport { courseAPI, lessonAPI, assignmentAPI, type Lesson, type Assignment } from \"@/lib/api\";\n\n// Dynamic imports to avoid SSR issues\nconst CourseForm = dynamic(() => import(\"@/components/instructor/CourseForm\"), { ssr: false });\nconst LessonForm = dynamic(() => import(\"@/components/instructor/LessonForm\"), { ssr: false });\nconst AssignmentForm = dynamic(() => import(\"@/components/instructor/AssignmentForm\"), { ssr: false });\n\n// Import interfaces from api.ts\n\nexport default function InstructorDashboard() {\n  const [activeTab, setActiveTab] = useState<\"overview\" | \"courses\" | \"lessons\" | \"assignments\">(\"overview\");\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [lessons, setLessons] = useState<Lesson[]>([]);\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  \n  // Loading states\n  const [loading, setLoading] = useState(true);\n  const [actionLoading, setActionLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Modal states\n  const [showCourseForm, setShowCourseForm] = useState(false);\n  const [showLessonForm, setShowLessonForm] = useState(false);\n  const [showAssignmentForm, setShowAssignmentForm] = useState(false);\n  \n  // Edit states\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const [editingLesson, setEditingLesson] = useState<Lesson | null>(null);\n  const [editingAssignment, setEditingAssignment] = useState<Assignment | null>(null);\n\n  // Load data from Firebase API\n  useEffect(() => {\n    loadAllData();\n  }, []);\n\n  const loadAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [coursesData, lessonsData, assignmentsData] = await Promise.all([\n        courseAPI.getAll(),\n        lessonAPI.getAll(),\n        assignmentAPI.getAll()\n      ]);\n      \n      setCourses(coursesData || []);\n      setLessons(lessonsData || []);\n      setAssignments(assignmentsData || []);\n    } catch (err) {\n      console.error('Error loading data:', err);\n      setError('Failed to load data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddCourse = () => {\n    setEditingCourse(null);\n    setShowCourseForm(true);\n  };\n\n  const handleEditCourse = (course: Course) => {\n    setEditingCourse(course);\n    setShowCourseForm(true);\n  };\n\n  const handleDeleteCourse = async (courseId: string) => {\n    if (confirm(\"Are you sure you want to delete this course? This will also delete all related lessons and assignments.\")) {\n      try {\n        setActionLoading(true);\n        await courseAPI.delete(courseId);\n        \n        // Remove from local state\n        setCourses(courses.filter(c => c.id !== courseId));\n        setLessons(lessons.filter(l => l.courseId !== courseId));\n        setAssignments(assignments.filter(a => a.courseId !== courseId));\n      } catch (err) {\n        console.error('Error deleting course:', err);\n        alert('Failed to delete course. Please try again.');\n      } finally {\n        setActionLoading(false);\n      }\n    }\n  };\n\n  const handleSaveCourse = async (courseData: Omit<Course, \"id\">) => {\n    try {\n      setActionLoading(true);\n      \n      if (editingCourse) {\n        // Update existing course\n        const updatedCourse = await courseAPI.update(editingCourse.id, courseData);\n        setCourses(courses.map(c => \n          c.id === editingCourse.id \n            ? { ...courseData, id: editingCourse.id }\n            : c\n        ));\n      } else {\n        // Create new course\n        const newCourse = await courseAPI.create(courseData);\n        setCourses([...courses, { ...courseData, id: newCourse.id }]);\n      }\n      \n      setShowCourseForm(false);\n      setEditingCourse(null);\n    } catch (err) {\n      console.error('Error saving course:', err);\n      alert('Failed to save course. Please try again.');\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleAddLesson = () => {\n    setEditingLesson(null);\n    setShowLessonForm(true);\n  };\n\n  const handleEditLesson = (lesson: Lesson) => {\n    setEditingLesson(lesson);\n    setShowLessonForm(true);\n  };\n\n  const handleDeleteLesson = async (lessonId: string) => {\n    if (confirm(\"Are you sure you want to delete this lesson?\")) {\n      try {\n        setActionLoading(true);\n        await lessonAPI.delete(lessonId);\n        setLessons(lessons.filter(l => l.id !== lessonId));\n      } catch (err) {\n        console.error('Error deleting lesson:', err);\n        alert('Failed to delete lesson. Please try again.');\n      } finally {\n        setActionLoading(false);\n      }\n    }\n  };\n\n  const handleSaveLesson = async (lessonData: Omit<Lesson, \"id\">) => {\n    try {\n      setActionLoading(true);\n      \n      if (editingLesson) {\n        // Update existing lesson\n        await lessonAPI.update(editingLesson.id, lessonData);\n        setLessons(lessons.map(l => \n          l.id === editingLesson.id \n            ? { ...lessonData, id: editingLesson.id }\n            : l\n        ));\n      } else {\n        // Create new lesson\n        const newLesson = await lessonAPI.create(lessonData);\n        setLessons([...lessons, { ...lessonData, id: newLesson.id }]);\n      }\n      \n      setShowLessonForm(false);\n      setEditingLesson(null);\n    } catch (err) {\n      console.error('Error saving lesson:', err);\n      alert('Failed to save lesson. Please try again.');\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleAddAssignment = () => {\n    setEditingAssignment(null);\n    setShowAssignmentForm(true);\n  };\n\n  const handleEditAssignment = (assignment: Assignment) => {\n    setEditingAssignment(assignment);\n    setShowAssignmentForm(true);\n  };\n\n  const handleDeleteAssignment = async (assignmentId: string) => {\n    if (confirm(\"Are you sure you want to delete this assignment?\")) {\n      try {\n        setActionLoading(true);\n        await assignmentAPI.delete(assignmentId);\n        setAssignments(assignments.filter(a => a.id !== assignmentId));\n      } catch (err) {\n        console.error('Error deleting assignment:', err);\n        alert('Failed to delete assignment. Please try again.');\n      } finally {\n        setActionLoading(false);\n      }\n    }\n  };\n\n  const handleSaveAssignment = async (assignmentData: Omit<Assignment, \"id\">) => {\n    try {\n      setActionLoading(true);\n      \n      if (editingAssignment) {\n        // Update existing assignment\n        await assignmentAPI.update(editingAssignment.id, assignmentData);\n        setAssignments(assignments.map(a => \n          a.id === editingAssignment.id \n            ? { ...assignmentData, id: editingAssignment.id }\n            : a\n        ));\n      } else {\n        // Create new assignment\n        const newAssignment = await assignmentAPI.create(assignmentData);\n        setAssignments([...assignments, { ...assignmentData, id: newAssignment.id }]);\n      }\n      \n      setShowAssignmentForm(false);\n      setEditingAssignment(null);\n    } catch (err) {\n      console.error('Error saving assignment:', err);\n      alert('Failed to save assignment. Please try again.');\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Courses</p>\n              <p className=\"text-3xl font-bold text-blue-600\">{courses.length}</p>\n            </div>\n            <BookOpen className=\"h-12 w-12 text-blue-600\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-xl shadow-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Lessons</p>\n              <p className=\"text-3xl font-bold text-green-600\">{lessons.length}</p>\n            </div>\n            <FileText className=\"h-12 w-12 text-green-600\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-xl shadow-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Assignments</p>\n              <p className=\"text-3xl font-bold text-purple-600\">{assignments.length}</p>\n            </div>\n            <Users className=\"h-12 w-12 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-xl shadow-lg p-6\">\n        <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Recent Activity</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg\">\n            <BookOpen className=\"h-5 w-5 text-blue-600\" />\n            <span className=\"text-gray-700\">Course \"React Fundamentals\" was updated</span>\n            <span className=\"text-sm text-gray-500 ml-auto\">2 hours ago</span>\n          </div>\n          <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n            <FileText className=\"h-5 w-5 text-green-600\" />\n            <span className=\"text-gray-700\">New lesson \"Introduction to React\" was added</span>\n            <span className=\"text-sm text-gray-500 ml-auto\">1 day ago</span>\n          </div>\n          <div className=\"flex items-center space-x-3 p-3 bg-purple-50 rounded-lg\">\n            <Users className=\"h-5 w-5 text-purple-600\" />\n            <span className=\"text-gray-700\">Assignment \"Build a Todo App\" was created</span>\n            <span className=\"text-sm text-gray-500 ml-auto\">3 days ago</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCourses = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">My Courses</h2>\n        <button\n          onClick={handleAddCourse}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-blue-700 transition-colors\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Add Course</span>\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {courses.map((course) => (\n          <div key={course.id} className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n            <div className=\"w-full h-48 bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center\">\n              <BookOpen className=\"h-16 w-16 text-white opacity-50\" />\n            </div>\n            {/* <img\n              src={course.imageUrl}\n              alt={course.title}\n              className=\"w-full h-48 object-cover\"\n            /> */}\n            <div className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-gray-800 mb-2\">{course.title}</h3>\n              <p className=\"text-gray-600 mb-4\">{course.description}</p>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold text-blue-600\">${course.price}</span>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleEditCourse(course)}\n                    className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\n                    title=\"Edit Course\"\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={() => handleDeleteCourse(course.id)}\n                    className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\n                    title=\"Delete Course\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderLessons = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Lessons</h2>\n        <button\n          onClick={handleAddLesson}\n          className=\"bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-green-700 transition-colors\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Add Lesson</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Title\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Course\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Duration\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {lessons.map((lesson) => {\n                const course = courses.find(c => c.id === lesson.courseId);\n                return (\n                  <tr key={lesson.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{lesson.title}</div>\n                      <div className=\"text-sm text-gray-500\">{lesson.description}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {course?.title || \"Unknown Course\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {lesson.duration}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => handleEditLesson(lesson)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Edit Lesson\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleDeleteLesson(lesson.id)}\n                          className=\"text-red-600 hover:text-red-900\"\n                          title=\"Delete Lesson\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAssignments = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Assignments</h2>\n        <button\n          onClick={handleAddAssignment}\n          className=\"bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-purple-700 transition-colors\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Add Assignment</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Title\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Course\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Due Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Points\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {assignments.map((assignment) => {\n                const course = courses.find(c => c.id === assignment.courseId);\n                return (\n                  <tr key={assignment.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{assignment.title}</div>\n                      <div className=\"text-sm text-gray-500\">{assignment.description}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {course?.title || \"Unknown Course\"}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(assignment.dueDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {assignment.maxPoints}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => handleEditAssignment(assignment)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Edit Assignment\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleDeleteAssignment(assignment.id)}\n                          className=\"text-red-600 hover:text-red-900\"\n                          title=\"Delete Assignment\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Show loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 text-blue-600 animate-spin mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Loading Dashboard...</h2>\n          <p className=\"text-gray-600\">Please wait while we load your courses, lessons, and assignments.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n            <h2 className=\"text-2xl font-bold text-red-800 mb-2\">Error Loading Dashboard</h2>\n            <p className=\"text-red-600 mb-4\">{error}</p>\n            <button\n              onClick={loadAllData}\n              className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Instructor Dashboard</h1>\n          <p className=\"text-gray-600\">Manage your courses, lessons, and assignments</p>\n          {actionLoading && (\n            <div className=\"mt-2 flex items-center text-blue-600\">\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              <span>Processing...</span>\n            </div>\n          )}\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"bg-white rounded-xl shadow-lg mb-8\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 px-8\">\n              {[\n                { id: \"overview\" as const, label: \"Overview\", icon: BookOpen },\n                { id: \"courses\" as const, label: \"Courses\", icon: BookOpen },\n                { id: \"lessons\" as const, label: \"Lessons\", icon: FileText },\n                { id: \"assignments\" as const, label: \"Assignments\", icon: Users },\n              ].map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors flex items-center space-x-2 ${\n                      activeTab === tab.id\n                        ? \"border-blue-600 text-blue-600\"\n                        : \"border-transparent text-gray-500 hover:text-gray-700\"\n                    }`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{tab.label}</span>\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n\n          <div className=\"p-8\">\n            {activeTab === \"overview\" && renderOverview()}\n            {activeTab === \"courses\" && renderCourses()}\n            {activeTab === \"lessons\" && renderLessons()}\n            {activeTab === \"assignments\" && renderAssignments()}\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showCourseForm && (\n        <CourseForm\n          course={editingCourse}\n          onSave={handleSaveCourse}\n          onCancel={() => {\n            setShowCourseForm(false);\n            setEditingCourse(null);\n          }}\n        />\n      )}\n\n      {showLessonForm && (\n        <LessonForm\n          lesson={editingLesson}\n          courses={courses}\n          onSave={handleSaveLesson}\n          onCancel={() => {\n            setShowLessonForm(false);\n            setEditingLesson(null);\n          }}\n        />\n      )}\n\n      {showAssignmentForm && (\n        <AssignmentForm\n          assignment={editingAssignment}\n          courses={courses}\n          onSave={handleSaveAssignment}\n          onCancel={() => {\n            setShowAssignmentForm(false);\n            setEditingAssignment(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":23472},"app/profile/page.tsx":{"content":"","size_bytes":0},"components/instructor/AssignmentForm.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { X } from \"lucide-react\";\nimport type { Course, Assignment } from \"@/lib/types\";\n\ninterface AssignmentFormProps {\n  assignment?: Assignment | null;\n  courses: Course[];\n  onSave: (assignment: Omit<Assignment, \"id\">) => void;\n  onCancel: () => void;\n}\n\nexport default function AssignmentForm({ assignment, courses, onSave, onCancel }: AssignmentFormProps) {\n  const [formData, setFormData] = useState({\n    courseId: \"\",\n    title: \"\",\n    description: \"\",\n    dueDate: \"\",\n    maxPoints: 100,\n    instructions: \"\",\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (assignment) {\n      setFormData({\n        courseId: assignment.courseId,\n        title: assignment.title,\n        description: assignment.description,\n        dueDate: assignment.dueDate,\n        maxPoints: assignment.maxPoints,\n        instructions: assignment.instructions,\n      });\n    }\n  }, [assignment]);\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.courseId) {\n      newErrors.courseId = \"Please select a course\";\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = \"Title is required\";\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = \"Description is required\";\n    }\n\n    if (!formData.dueDate) {\n      newErrors.dueDate = \"Due date is required\";\n    }\n\n    if (formData.maxPoints <= 0) {\n      newErrors.maxPoints = \"Max points must be greater than 0\";\n    }\n\n    if (!formData.instructions.trim()) {\n      newErrors.instructions = \"Instructions are required\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      onSave(formData);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === \"maxPoints\" ? parseInt(value) || 0 : value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: \"\",\n      }));\n    }\n  };\n\n  // Get today's date in YYYY-MM-DD format for min date\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">\n            {assignment ? \"Edit Assignment\" : \"Add New Assignment\"}\n          </h2>\n          <button\n            onClick={onCancel}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div>\n            <label htmlFor=\"courseId\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Course *\n            </label>\n            <select\n              id=\"courseId\"\n              name=\"courseId\"\n              value={formData.courseId}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.courseId ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n            >\n              <option value=\"\">Select a course</option>\n              {courses.map((course) => (\n                <option key={course.id} value={course.id}>\n                  {course.title}\n                </option>\n              ))}\n            </select>\n            {errors.courseId && <p className=\"text-red-500 text-sm mt-1\">{errors.courseId}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Assignment Title *\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.title ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter assignment title\"\n            />\n            {errors.title && <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Description *\n            </label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              rows={3}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.description ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter assignment description\"\n            />\n            {errors.description && <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label htmlFor=\"dueDate\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Due Date *\n              </label>\n              <input\n                type=\"date\"\n                id=\"dueDate\"\n                name=\"dueDate\"\n                value={formData.dueDate}\n                onChange={handleChange}\n                min={today}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.dueDate ? \"border-red-500\" : \"border-gray-300\"\n                }`}\n              />\n              {errors.dueDate && <p className=\"text-red-500 text-sm mt-1\">{errors.dueDate}</p>}\n            </div>\n\n            <div>\n              <label htmlFor=\"maxPoints\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Maximum Points *\n              </label>\n              <input\n                type=\"number\"\n                id=\"maxPoints\"\n                name=\"maxPoints\"\n                value={formData.maxPoints}\n                onChange={handleChange}\n                min=\"1\"\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.maxPoints ? \"border-red-500\" : \"border-gray-300\"\n                }`}\n                placeholder=\"100\"\n              />\n              {errors.maxPoints && <p className=\"text-red-500 text-sm mt-1\">{errors.maxPoints}</p>}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"instructions\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Instructions *\n            </label>\n            <textarea\n              id=\"instructions\"\n              name=\"instructions\"\n              value={formData.instructions}\n              onChange={handleChange}\n              rows={8}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.instructions ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter detailed instructions for the assignment...\"\n            />\n            {errors.instructions && <p className=\"text-red-500 text-sm mt-1\">{errors.instructions}</p>}\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Provide clear, detailed instructions for students to complete the assignment\n            </p>\n          </div>\n\n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n            >\n              {assignment ? \"Update Assignment\" : \"Create Assignment\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":8757},"components/instructor/CourseForm.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { X } from \"lucide-react\";\nimport type { Course } from \"@/lib/types\";\n\ninterface CourseFormProps {\n  course?: Course | null;\n  onSave: (course: Omit<Course, \"id\">) => void;\n  onCancel: () => void;\n}\n\nexport default function CourseForm({ course, onSave, onCancel }: CourseFormProps) {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    instructor: \"\",\n    imageUrl: \"\",\n    price: 0,\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (course) {\n      setFormData({\n        title: course.title,\n        description: course.description,\n        category: course.category,\n        instructor: course.instructor,\n        imageUrl: course.imageUrl,\n        price: course.price,\n      });\n    }\n  }, [course]);\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.title.trim()) {\n      newErrors.title = \"Title is required\";\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = \"Description is required\";\n    }\n\n    if (!formData.category.trim()) {\n      newErrors.category = \"Category is required\";\n    }\n\n    if (!formData.instructor.trim()) {\n      newErrors.instructor = \"Instructor name is required\";\n    }\n\n    if (formData.price < 0) {\n      newErrors.price = \"Price must be a positive number\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      onSave(formData);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === \"price\" ? parseFloat(value) || 0 : value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: \"\",\n      }));\n    }\n  };\n\n  const categories = [\n    \"Programming\",\n    \"Web Development\",\n    \"Data Science\",\n    \"Design\",\n    \"Business\",\n    \"Marketing\",\n    \"Photography\",\n    \"Music\",\n    \"Language\",\n    \"Other\",\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">\n            {course ? \"Edit Course\" : \"Add New Course\"}\n          </h2>\n          <button\n            onClick={onCancel}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div>\n            <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Course Title *\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.title ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter course title\"\n            />\n            {errors.title && <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Description *\n            </label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              rows={4}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.description ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter course description\"\n            />\n            {errors.description && <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Category *\n              </label>\n              <select\n                id=\"category\"\n                name=\"category\"\n                value={formData.category}\n                onChange={handleChange}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.category ? \"border-red-500\" : \"border-gray-300\"\n                }`}\n              >\n                <option value=\"\">Select a category</option>\n                {categories.map((cat) => (\n                  <option key={cat} value={cat}>\n                    {cat}\n                  </option>\n                ))}\n              </select>\n              {errors.category && <p className=\"text-red-500 text-sm mt-1\">{errors.category}</p>}\n            </div>\n\n            <div>\n              <label htmlFor=\"price\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Price ($) *\n              </label>\n              <input\n                type=\"number\"\n                id=\"price\"\n                name=\"price\"\n                value={formData.price}\n                onChange={handleChange}\n                min=\"0\"\n                step=\"0.01\"\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.price ? \"border-red-500\" : \"border-gray-300\"\n                }`}\n                placeholder=\"0.00\"\n              />\n              {errors.price && <p className=\"text-red-500 text-sm mt-1\">{errors.price}</p>}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"instructor\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Instructor Name *\n            </label>\n            <input\n              type=\"text\"\n              id=\"instructor\"\n              name=\"instructor\"\n              value={formData.instructor}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.instructor ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter instructor name\"\n            />\n            {errors.instructor && <p className=\"text-red-500 text-sm mt-1\">{errors.instructor}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"imageUrl\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Course Image URL\n            </label>\n            <input\n              type=\"url\"\n              id=\"imageUrl\"\n              name=\"imageUrl\"\n              value={formData.imageUrl}\n              onChange={handleChange}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"https://example.com/image.jpg\"\n            />\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Optional: Add a URL for the course thumbnail image\n            </p>\n          </div>\n\n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              {course ? \"Update Course\" : \"Create Course\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":8380},"components/instructor/LessonForm.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { X } from \"lucide-react\";\nimport type { Course, Lesson } from \"@/lib/types\";\n\ninterface LessonFormProps {\n  lesson?: Lesson | null;\n  courses: Course[];\n  onSave: (lesson: Omit<Lesson, \"id\">) => void;\n  onCancel: () => void;\n}\n\nexport default function LessonForm({ lesson, courses, onSave, onCancel }: LessonFormProps) {\n  const [formData, setFormData] = useState({\n    courseId: \"\",\n    title: \"\",\n    description: \"\",\n    duration: \"\",\n    videoUrl: \"\",\n    content: \"\",\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (lesson) {\n      setFormData({\n        courseId: lesson.courseId,\n        title: lesson.title,\n        description: lesson.description,\n        duration: lesson.duration,\n        videoUrl: lesson.videoUrl || \"\",\n        content: lesson.content,\n      });\n    }\n  }, [lesson]);\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.courseId) {\n      newErrors.courseId = \"Please select a course\";\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = \"Title is required\";\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = \"Description is required\";\n    }\n\n    if (!formData.duration.trim()) {\n      newErrors.duration = \"Duration is required\";\n    }\n\n    if (!formData.content.trim()) {\n      newErrors.content = \"Content is required\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      onSave(formData);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: \"\",\n      }));\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">\n            {lesson ? \"Edit Lesson\" : \"Add New Lesson\"}\n          </h2>\n          <button\n            onClick={onCancel}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div>\n            <label htmlFor=\"courseId\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Course *\n            </label>\n            <select\n              id=\"courseId\"\n              name=\"courseId\"\n              value={formData.courseId}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.courseId ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n            >\n              <option value=\"\">Select a course</option>\n              {courses.map((course) => (\n                <option key={course.id} value={course.id}>\n                  {course.title}\n                </option>\n              ))}\n            </select>\n            {errors.courseId && <p className=\"text-red-500 text-sm mt-1\">{errors.courseId}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Lesson Title *\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.title ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter lesson title\"\n            />\n            {errors.title && <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>}\n          </div>\n\n          <div>\n            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Description *\n            </label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              rows={3}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.description ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter lesson description\"\n            />\n            {errors.description && <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label htmlFor=\"duration\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Duration *\n              </label>\n              <input\n                type=\"text\"\n                id=\"duration\"\n                name=\"duration\"\n                value={formData.duration}\n                onChange={handleChange}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.duration ? \"border-red-500\" : \"border-gray-300\"\n                }`}\n                placeholder=\"e.g., 30 min, 1 hour\"\n              />\n              {errors.duration && <p className=\"text-red-500 text-sm mt-1\">{errors.duration}</p>}\n            </div>\n\n            <div>\n              <label htmlFor=\"videoUrl\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Video URL\n              </label>\n              <input\n                type=\"url\"\n                id=\"videoUrl\"\n                name=\"videoUrl\"\n                value={formData.videoUrl}\n                onChange={handleChange}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"https://example.com/video.mp4\"\n              />\n              <p className=\"text-gray-500 text-sm mt-1\">\n                Optional: Add a URL for the lesson video\n              </p>\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"content\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Lesson Content *\n            </label>\n            <textarea\n              id=\"content\"\n              name=\"content\"\n              value={formData.content}\n              onChange={handleChange}\n              rows={8}\n              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.content ? \"border-red-500\" : \"border-gray-300\"\n              }`}\n              placeholder=\"Enter the main content of the lesson...\"\n            />\n            {errors.content && <p className=\"text-red-500 text-sm mt-1\">{errors.content}</p>}\n            <p className=\"text-gray-500 text-sm mt-1\">\n              You can use markdown formatting for rich text content\n            </p>\n          </div>\n\n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n            >\n              {lesson ? \"Update Lesson\" : \"Create Lesson\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":8272},"app/api/assignments/route.ts":{"content":"// app/api/assignments/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  orderBy, \n  serverTimestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch all assignments\nexport async function GET() {\n  try {\n    const assignmentsRef = collection(db, \"assignments\");\n    const q = query(assignmentsRef, orderBy(\"createdAt\", \"desc\"));\n    const querySnapshot = await getDocs(q);\n    \n    const assignments = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    return NextResponse.json({ assignments }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching assignments:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch assignments\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new assignment\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { courseId, title, description, dueDate, maxPoints, instructions } = body;\n    \n    // Validation\n    if (!courseId || !title || !description || !dueDate || !maxPoints || !instructions) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const assignmentData = {\n      courseId: courseId.trim(),\n      title: title.trim(),\n      description: description.trim(),\n      dueDate: dueDate.trim(),\n      maxPoints: Number(maxPoints),\n      instructions: instructions.trim(),\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n    \n    const docRef = await addDoc(collection(db, \"assignments\"), assignmentData);\n    \n    return NextResponse.json(\n      { \n        id: docRef.id,\n        ...assignmentData,\n        message: \"Assignment created successfully\" \n      }, \n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Error creating assignment:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create assignment\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":2077},"app/api/courses/route.ts":{"content":"// app/api/courses/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  orderBy, \n  serverTimestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch all courses\nexport async function GET() {\n  try {\n    const coursesRef = collection(db, \"courses\");\n    const q = query(coursesRef, orderBy(\"createdAt\", \"desc\"));\n    const querySnapshot = await getDocs(q);\n    \n    const courses = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    return NextResponse.json({ courses }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching courses:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch courses\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new course\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { title, description, category, instructor, imageUrl, price } = body;\n    \n    // Validation\n    if (!title || !description || !category || !instructor || price === undefined) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const courseData = {\n      title: title.trim(),\n      description: description.trim(),\n      category: category.trim(),\n      instructor: instructor.trim(),\n      imageUrl: imageUrl?.trim() || \"\",\n      price: Number(price),\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n    \n    const docRef = await addDoc(collection(db, \"courses\"), courseData);\n    \n    return NextResponse.json(\n      { \n        id: docRef.id,\n        ...courseData,\n        message: \"Course created successfully\" \n      }, \n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Error creating course:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create course\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":1996},"app/api/lessons/route.ts":{"content":"// app/api/lessons/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  orderBy, \n  serverTimestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch all lessons\nexport async function GET() {\n  try {\n    const lessonsRef = collection(db, \"lessons\");\n    const q = query(lessonsRef, orderBy(\"createdAt\", \"desc\"));\n    const querySnapshot = await getDocs(q);\n    \n    const lessons = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    return NextResponse.json({ lessons }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching lessons:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch lessons\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create new lesson\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { courseId, title, description, duration, videoUrl, content } = body;\n    \n    // Validation\n    if (!courseId || !title || !description || !duration || !content) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const lessonData = {\n      courseId: courseId.trim(),\n      title: title.trim(),\n      description: description.trim(),\n      duration: duration.trim(),\n      videoUrl: videoUrl?.trim() || \"\",\n      content: content.trim(),\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n    \n    const docRef = await addDoc(collection(db, \"lessons\"), lessonData);\n    \n    return NextResponse.json(\n      { \n        id: docRef.id,\n        ...lessonData,\n        message: \"Lesson created successfully\" \n      }, \n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Error creating lesson:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create lesson\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":1982},"app/auth/login/page.tsx":{"content":"","size_bytes":0},"app/auth/register/page.tsx":{"content":"","size_bytes":0},"app/courses/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport Image from \"next/image\";\nimport { mockCourses } from \"@/lib/mockCourses\";\nimport type { Course, CourseModule } from \"@/lib/types\";\n\nconst mockModules: CourseModule[] = [\n  {\n    id: \"1\",\n    title: \"Introduction and Setup\",\n    duration: \"15 min\",\n    completed: false,\n    description:\n      \"Get started with the course fundamentals. Learn about the tools and environment setup required for the course. We'll cover installation procedures, workspace configuration, and initial project setup to ensure you're ready for the learning journey ahead.\",\n  },\n  {\n    id: \"2\",\n    title: \"Core Concepts\",\n    duration: \"45 min\",\n    completed: false,\n    description:\n      \"Dive deep into the essential concepts that form the foundation of this subject. Understand the key principles, terminology, and theoretical framework that will guide your practical work throughout the course.\",\n  },\n  {\n    id: \"3\",\n    title: \"Hands-on Practice\",\n    duration: \"60 min\",\n    completed: false,\n    description:\n      \"Apply what you've learned through guided exercises and practical examples. Work through real-world scenarios and build your first project components while reinforcing the core concepts from previous lessons.\",\n  },\n  {\n    id: \"4\",\n    title: \"Advanced Techniques\",\n    duration: \"30 min\",\n    completed: false,\n    description:\n      \"Explore advanced strategies and optimization techniques used by professionals in the field. Learn best practices, performance considerations, and advanced patterns that will elevate your skills to the next level.\",\n  },\n  {\n    id: \"5\",\n    title: \"Final Project\",\n    duration: \"90 min\",\n    completed: false,\n    description:\n      \"Put everything together in a comprehensive final project. Design, build, and deploy a complete solution that demonstrates your mastery of all course concepts. Includes project planning, implementation, testing, and presentation.\",\n  },\n];\n\nexport default function CourseDetailsPage() {\n  const params = useParams();\n  const router = useRouter();\n  const [course, setCourse] = useState<Course | null>(null);\n  const [modules, setModules] = useState<CourseModule[]>(mockModules);\n  const [activeTab, setActiveTab] = useState<\n    \"overview\" | \"lessons\" | \"reviews\"\n  >(\"overview\");\n  const [isEnrolled, setIsEnrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [expandedLessons, setExpandedLessons] = useState<Set<string>>(\n    new Set()\n  );\n\n  useEffect(() => {\n    const courseId = params.id as string;\n    const foundCourse = mockCourses.find((c) => c.id === courseId);\n\n    if (foundCourse) {\n      setCourse(foundCourse);\n    }\n    setLoading(false);\n  }, [params.id]);\n\n  const handleEnroll = () => {\n    setIsEnrolled(true);\n    // Here you would typically make an API call to enroll the user\n  };\n\n  const toggleModuleCompletion = (moduleId: string) => {\n    setModules((prev) =>\n      prev.map((module) =>\n        module.id === moduleId\n          ? { ...module, completed: !module.completed }\n          : module\n      )\n    );\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <span\n        key={i}\n        className={`text-lg ${\n          i < rating ? \"text-yellow-400\" : \"text-gray-300\"\n        }`}\n      >\n        ★\n      </span>\n    ));\n  };\n\n  const toggleLessonExpansion = (moduleId: string) => {\n    setExpandedLessons((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(moduleId)) {\n        newSet.delete(moduleId);\n      } else {\n        newSet.add(moduleId);\n      }\n      return newSet;\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-xl text-gray-600\">Loading course details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">📚</div>\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">\n            Course Not Found\n          </h1>\n          <p className=\"text-gray-600 mb-6\">\n            The course you&apos;re looking for doesn&apos;t exist.\n          </p>\n          <button\n            onClick={() => router.push(\"/\")}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors hover:cursor-pointer\"\n          >\n            Back to Courses\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const completedModules = modules.filter((m) => m.completed).length;\n  const progressPercentage = (completedModules / modules.length) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white\">\n        <div className=\"container mx-auto px-8 py-12\">\n          <button\n            onClick={() => router.push(\"/\")}\n            className=\"mb-6 flex items-center text-blue-100 hover:text-white transition-colors\"\n          >\n            <span className=\"mr-2\">←</span> Back to Courses\n          </button>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <div className=\"inline-block bg-white/20 backdrop-blur-sm text-white text-sm px-4 py-2 rounded-full mb-4\">\n                {course.category}\n              </div>\n              <h1 className=\"text-4xl lg:text-5xl font-bold mb-6 text-balance\">\n                {course.title}\n              </h1>\n              <p className=\"text-xl text-blue-100 mb-6 text-pretty\">\n                {course.description}\n              </p>\n\n              <div className=\"flex items-center space-x-6 mb-8\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n                    👨‍🏫\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-blue-100\">Instructor</p>\n                    <p className=\"font-semibold\">{course.instructor}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-1\">\n                  {renderStars(5)}\n                  <span className=\"ml-2 text-blue-100\">4.8 (234 reviews)</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-3xl font-bold\">${course.price}</span>\n                {!isEnrolled ? (\n                  <button\n                    onClick={handleEnroll}\n                    className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors shadow-lg\"\n                  >\n                    Enroll Now\n                  </button>\n                ) : (\n                  <div className=\"bg-green-500 text-white px-8 py-3 rounded-lg font-semibold\">\n                    ✓ Enrolled\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <Image\n                src={\n                  course.imageUrl ||\n                  \"/placeholder.svg?height=400&width=600&query=course preview\" ||\n                  \"/placeholder.svg\"\n                }\n                alt={course.title}\n                width={600}\n                height={400}\n                className=\"rounded-xl shadow-2xl\"\n                style={{ objectFit: \"cover\" }}\n              />\n              {isEnrolled && (\n                <div className=\"absolute inset-0 bg-black/50 rounded-xl flex items-center justify-center\">\n                  <button className=\"bg-white text-gray-800 px-6 py-3 rounded-full font-semibold hover:bg-gray-100 transition-colors\">\n                    ▶ Continue Learning\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Bar (only show if enrolled) */}\n      {isEnrolled && (\n        <div className=\"bg-white border-b\">\n          <div className=\"container mx-auto px-8 py-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                Course Progress\n              </span>\n              <span className=\"text-sm text-gray-600\">\n                {completedModules}/{modules.length} modules completed\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${progressPercentage}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-8 py-12\">\n        {/* Tab Navigation */}\n        <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 px-8\">\n              {[\n                {\n                  id: \"overview\" as const,\n                  label: \"Overview\",\n                },\n                {\n                  id: \"lessons\" as const,\n                  label: \"Lessons\",\n                },\n                {\n                  id: \"reviews\" as const,\n                  label: \"Reviews\",\n                },\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors hover:cursor-pointer ${\n                    activeTab === tab.id\n                      ? \"border-blue-600 text-blue-600\"\n                      : \"border-transparent text-gray-500 hover:text-gray-700\"\n                  }`}\n                >\n                  {tab.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          <div className=\"p-8\">\n            {/* Overview Tab */}\n            {activeTab === \"overview\" && (\n              <div className=\"space-y-8\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                    What You&apos;ll Learn\n                  </h2>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[\n                      {\n                        text: \"Master the fundamentals and core concepts\",\n                      },\n                      {\n                        text: \"Build real-world projects from scratch\",\n                      },\n                      {\n                        text: \"Learn industry best practices and standards\",\n                      },\n                      {\n                        text: \"Get hands-on experience with practical exercises\",\n                      },\n                      {\n                        text: \"Understand advanced techniques and optimization\",\n                      },\n                      {\n                        text: \"Prepare for professional certification\",\n                      },\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-start space-x-3\">\n                        <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                          <span className=\"text-green-600 text-sm\">✓</span>\n                        </div>\n                        <span className=\"text-gray-700\">{item.text}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">\n                    Course Details\n                  </h2>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"bg-blue-50 p-6 rounded-lg\">\n                      <div className=\"text-blue-600 text-2xl mb-2\">🎯</div>\n                      <h3 className=\"font-semibold text-gray-800 mb-2\">\n                        Skill Level\n                      </h3>\n                      <p className=\"text-gray-600\">Beginner to Intermediate</p>\n                    </div>\n                    <div className=\"bg-green-50 p-6 rounded-lg\">\n                      <div className=\"text-green-600 text-2xl mb-2\">⏱️</div>\n                      <h3 className=\"font-semibold text-gray-800 mb-2\">\n                        Duration\n                      </h3>\n                      <p className=\"text-gray-600\">4 hours of content</p>\n                    </div>\n                    <div className=\"bg-purple-50 p-6 rounded-lg\">\n                      <div className=\"text-purple-600 text-2xl mb-2\">🏆</div>\n                      <h3 className=\"font-semibold text-gray-800 mb-2\">\n                        Certificate\n                      </h3>\n                      <p className=\"text-gray-600\">Upon completion</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Lessons Tab */}\n            {activeTab === \"lessons\" && (\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">\n                  Course Lessons\n                </h2>\n                <div className=\"space-y-4\">\n                  {modules.map((module, index) => {\n                    const isExpanded = expandedLessons.has(module.id);\n                    return (\n                      <div\n                        key={module.id}\n                        className={`border rounded-lg transition-all duration-200 ${\n                          module.completed\n                            ? \"bg-green-50 border-green-200\"\n                            : \"bg-white border-gray-200\"\n                        }`}\n                      >\n                        <div\n                          className={`p-4 cursor-pointer hover:shadow-md transition-all duration-200 ${\n                            isExpanded ? \"border-b border-gray-200\" : \"\"\n                          }`}\n                          onClick={() => toggleLessonExpansion(module.id)}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div\n                                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                                  module.completed\n                                    ? \"bg-green-500 text-white\"\n                                    : \"bg-gray-100 text-gray-600\"\n                                }`}\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                                  isEnrolled &&\n                                    toggleModuleCompletion(module.id);\n                                }}\n                              >\n                                {module.completed ? \"✓\" : index + 1}\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-gray-800\">\n                                  {module.title}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">\n                                  {module.duration}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              {isEnrolled && (\n                                <div className=\"text-gray-400 text-sm\">\n                                  {module.completed\n                                    ? \"Completed\"\n                                    : \"Not started\"}\n                                </div>\n                              )}\n                              <div\n                                className={`transform transition-transform duration-200 text-gray-400 ${\n                                  isExpanded ? \"rotate-180\" : \"\"\n                                }`}\n                              >\n                                <svg\n                                  width=\"20\"\n                                  height=\"20\"\n                                  viewBox=\"0 0 24 24\"\n                                  fill=\"none\"\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                >\n                                  <path\n                                    d=\"M6 9L12 15L18 9\"\n                                    stroke=\"currentColor\"\n                                    strokeWidth=\"2\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                  />\n                                </svg>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        {isExpanded && (\n                          <div className=\"px-4 pb-4\">\n                            <div className=\"pl-12\">\n                              <p className=\"text-gray-700 leading-relaxed\">\n                                {module.description}\n                              </p>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* Reviews Tab */}\n            {activeTab === \"reviews\" && (\n              <div>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-800\">\n                    Student Reviews\n                  </h2>\n                  <div className=\"flex items-center space-x-2\">\n                    {renderStars(5)}\n                    <span className=\"text-lg font-semibold text-gray-800\">\n                      4.8\n                    </span>\n                    <span className=\"text-gray-600\">(234 reviews)</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-6\">\n                  {[\n                    {\n                      id: \"1\",\n                      userName: \"Sarah Chen\",\n                      rating: 5,\n                      comment:\n                        \"Excellent course! The instructor explains everything clearly and the projects are very practical.\",\n                      date: \"2024-01-15\",\n                    },\n                    {\n                      id: \"2\",\n                      userName: \"Mike Rodriguez\",\n                      rating: 4,\n                      comment:\n                        \"Great content and well-structured. Would recommend to anyone starting out.\",\n                      date: \"2024-01-10\",\n                    },\n                    {\n                      id: \"3\",\n                      userName: \"Emily Johnson\",\n                      rating: 5,\n                      comment:\n                        \"This course exceeded my expectations. The hands-on approach really helped me understand the concepts.\",\n                      date: \"2024-01-08\",\n                    },\n                  ].map((review) => (\n                    <div\n                      key={review.id}\n                      className=\"border-b border-gray-200 pb-6 last:border-b-0\"\n                    >\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-blue-600 font-semibold\">\n                            {review.userName.charAt(0)}\n                          </span>\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-semibold text-gray-800\">\n                              {review.userName}\n                            </h4>\n                            <span className=\"text-sm text-gray-500\">\n                              {review.date}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-1 mb-3\">\n                            {renderStars(review.rating)}\n                          </div>\n                          <p className=\"text-gray-700\">{review.comment}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21602},"app/api/assignments/[id]/route.ts":{"content":"// app/api/assignments/[id]/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  doc, \n  getDoc, \n  updateDoc, \n  deleteDoc, \n  serverTimestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch single assignment\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const assignmentDoc = await getDoc(doc(db, \"assignments\", params.id));\n    \n    if (!assignmentDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Assignment not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({\n      id: assignmentDoc.id,\n      ...assignmentDoc.data()\n    });\n  } catch (error) {\n    console.error(\"Error fetching assignment:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch assignment\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update assignment\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json();\n    const { courseId, title, description, dueDate, maxPoints, instructions } = body;\n    \n    // Validation\n    if (!courseId || !title || !description || !dueDate || !maxPoints || !instructions) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const assignmentRef = doc(db, \"assignments\", params.id);\n    const assignmentDoc = await getDoc(assignmentRef);\n    \n    if (!assignmentDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Assignment not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    const updateData = {\n      courseId: courseId.trim(),\n      title: title.trim(),\n      description: description.trim(),\n      dueDate: dueDate.trim(),\n      maxPoints: Number(maxPoints),\n      instructions: instructions.trim(),\n      updatedAt: serverTimestamp()\n    };\n    \n    await updateDoc(assignmentRef, updateData);\n    \n    return NextResponse.json({\n      id: params.id,\n      ...updateData,\n      message: \"Assignment updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error updating assignment:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update assignment\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Delete assignment\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const assignmentRef = doc(db, \"assignments\", params.id);\n    const assignmentDoc = await getDoc(assignmentRef);\n    \n    if (!assignmentDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Assignment not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    await deleteDoc(assignmentRef);\n    \n    return NextResponse.json({\n      message: \"Assignment deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting assignment:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete assignment\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":3047},"app/api/courses/[id]/route.ts":{"content":"// app/api/courses/[id]/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  doc, \n  getDoc, \n  updateDoc, \n  deleteDoc, \n  serverTimestamp,\n  collection,\n  query,\n  where,\n  getDocs\n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch single course\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const courseDoc = await getDoc(doc(db, \"courses\", params.id));\n    \n    if (!courseDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Course not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({\n      id: courseDoc.id,\n      ...courseDoc.data()\n    });\n  } catch (error) {\n    console.error(\"Error fetching course:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch course\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update course\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json();\n    const { title, description, category, instructor, imageUrl, price } = body;\n    \n    // Validation\n    if (!title || !description || !category || !instructor || price === undefined) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const courseRef = doc(db, \"courses\", params.id);\n    const courseDoc = await getDoc(courseRef);\n    \n    if (!courseDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Course not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    const updateData = {\n      title: title.trim(),\n      description: description.trim(),\n      category: category.trim(),\n      instructor: instructor.trim(),\n      imageUrl: imageUrl?.trim() || \"\",\n      price: Number(price),\n      updatedAt: serverTimestamp()\n    };\n    \n    await updateDoc(courseRef, updateData);\n    \n    return NextResponse.json({\n      id: params.id,\n      ...updateData,\n      message: \"Course updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error updating course:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update course\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Delete course\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const courseRef = doc(db, \"courses\", params.id);\n    const courseDoc = await getDoc(courseRef);\n    \n    if (!courseDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Course not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    // Also delete associated lessons and assignments\n    const lessonsQuery = query(\n      collection(db, \"lessons\"),\n      where(\"courseId\", \"==\", params.id)\n    );\n    const lessonsSnapshot = await getDocs(lessonsQuery);\n    \n    const assignmentsQuery = query(\n      collection(db, \"assignments\"),\n      where(\"courseId\", \"==\", params.id)\n    );\n    const assignmentsSnapshot = await getDocs(assignmentsQuery);\n    \n    // Delete all related lessons and assignments\n    const deletePromises = [\n      ...lessonsSnapshot.docs.map(doc => deleteDoc(doc.ref)),\n      ...assignmentsSnapshot.docs.map(doc => deleteDoc(doc.ref))\n    ];\n    \n    await Promise.all(deletePromises);\n    \n    // Delete the course\n    await deleteDoc(courseRef);\n    \n    return NextResponse.json({\n      message: \"Course and related content deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting course:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete course\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":3675},"app/api/lessons/[id]/route.ts":{"content":"// app/api/lessons/[id]/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { \n  doc, \n  getDoc, \n  updateDoc, \n  deleteDoc, \n  serverTimestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\n// GET - Fetch single lesson\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const lessonDoc = await getDoc(doc(db, \"lessons\", params.id));\n    \n    if (!lessonDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Lesson not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({\n      id: lessonDoc.id,\n      ...lessonDoc.data()\n    });\n  } catch (error) {\n    console.error(\"Error fetching lesson:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch lesson\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update lesson\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json();\n    const { courseId, title, description, duration, videoUrl, content } = body;\n    \n    // Validation\n    if (!courseId || !title || !description || !duration || !content) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" }, \n        { status: 400 }\n      );\n    }\n    \n    const lessonRef = doc(db, \"lessons\", params.id);\n    const lessonDoc = await getDoc(lessonRef);\n    \n    if (!lessonDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Lesson not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    const updateData = {\n      courseId: courseId.trim(),\n      title: title.trim(),\n      description: description.trim(),\n      duration: duration.trim(),\n      videoUrl: videoUrl?.trim() || \"\",\n      content: content.trim(),\n      updatedAt: serverTimestamp()\n    };\n    \n    await updateDoc(lessonRef, updateData);\n    \n    return NextResponse.json({\n      id: params.id,\n      ...updateData,\n      message: \"Lesson updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error updating lesson:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update lesson\" }, \n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Delete lesson\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const lessonRef = doc(db, \"lessons\", params.id);\n    const lessonDoc = await getDoc(lessonRef);\n    \n    if (!lessonDoc.exists()) {\n      return NextResponse.json(\n        { error: \"Lesson not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    await deleteDoc(lessonRef);\n    \n    return NextResponse.json({\n      message: \"Lesson deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting lesson:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete lesson\" }, \n      { status: 500 }\n    );\n  }\n}","size_bytes":2892}},"version":1}